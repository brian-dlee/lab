package pages

import (
	"github.com/brian-dlee/lab/pkg/htmx"
	"github.com/brian-dlee/lab/pkg/models"
	"github.com/brian-dlee/lab/pkg/templates"
	"github.com/brian-dlee/lab/templates/components"
	"github.com/brian-dlee/lab/templates/layouts"
)

type HomeDataAuthUser struct {
	Name string
}

type HomeDataPost struct {
	Title string
	Body  string
}

type HomeDataPager struct {
	IsBeginning bool
	IsEnd       bool
	Page        int
}

type HomeData struct {
	AuthUser HomeDataAuthUser
	Data     []HomeDataPost
	Pager    HomeDataPager
}

// TopContent renders the hero section and title
templ TopContent(pctx templates.PageContext) {
	<section class="hero is-info welcome is-small">
		<div class="hero-body">
			<div class="container">
				<h1 class="title">
					Hello
					if pctx.IsAuth() {
						, { pctx.GetAuthUser().Name }
					}
				</h1>
				<h2 class="subtitle">
					if pctx.IsAuth() {
						Welcome back!
					} else {
						Please login in to your account.
					}
				</h2>
			</div>
		</div>
	</section>
	<section class="section">
		<h1 class="title">Recent posts</h1>
		<h2 class="subtitle">
			Below is an example of both paging and AJAX fetching using HTMX
		</h2>
	</section>
}

// Posts renders the list of posts with pagination
templ Posts(pctx templates.PageContext) {
	if posts, ok := pctx.GetData().([]models.Post); ok {
		<div id="posts">
			for _, post := range posts {
				<article class="media">
					<figure class="media-left">
						<p class="image is-64x64">
							<img src={ string(pctx.File("gopher.png")) } alt="Gopher"/>
						</p>
					</figure>
					<div class="media-content">
						<div class="content">
							<p>
								<strong>{ post.Title }</strong>
								<br/>
								{ post.Body }
							</p>
						</div>
					</div>
				</article>
			}
			<div class="field is-grouped is-grouped-centered">
				{{ pager := pctx.GetPager() }}
				if !pager.IsBeginning() {
					<p class="control">
						<button
							class="button is-primary"
							hx-swap="outerHTML"
							hx-get={ "/?page=" + templates.Sub(pager.Page, 1) }
							hx-target="#posts"
						>
							Previous page
						</button>
					</p>
				}
				if !pager.IsEnd() {
					<p class="control">
						<button
							class="button is-primary"
							hx-swap="outerHTML"
							hx-get={ "/?page=" + templates.Add(pager.Page, 1) }
							hx-target="#posts"
						>
							Next page
						</button>
					</p>
				}
			</div>
		</div>
	} else {
		<div>Failed Posts</div>
	}
}

// FileMsg renders the file message component
templ FileMsg() {
	<div class="block"></div>
	<article class="message is-small is-warning" x-data="{show: true}" x-show="show">
		<div class="message-header">
			<p>Serving files</p>
			<button class="delete is-small" aria-label="delete" @click="show = false"></button>
		</div>
		<div class="message-body">
			In the example posts above, check how the file URL contains a cache-buster query parameter which changes only when the app is restarted.
			Static files also contain cache-control headers which are configured via middleware.
			You can also use AlpineJS to dismiss this message.
		</div>
	</article>
}

// Home renders the home page
templ Home(pctx templates.PageContext) {
	{{ data := htmx.Request{} }}
	if true {
		@layouts.Main(pctx) {
			@components.Messages(pctx)
			if data.Target != "posts" {
				@TopContent(pctx)
			}
			@Posts(pctx)
			if data.Target != "posts" {
				@FileMsg()
			}
		}
	} else {
		<div>Failed HTMX Request</div>
	}
}
